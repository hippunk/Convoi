;to-report create-msg-convoi-to-convoi [performative from dest content fd-list sujet]
to-report msg-split-split [nLeader_id]
  let msg create-msg-convoi-to-convoi "request" who nLeader_id "" [] "split"
  report msg
end

to-report msg-status 
  let l (list ticks get-convoi-critic get-leader-id-convoi get-hostile-belief) 
  let msg create-msg-convoi-to-convoi "inform" who get-leader-id-convoi l [] "status"
  report msg
end


to-report msg-status-leader 
  let my-id who
  let l (list ticks get-convoi-critic get-leader-id-convoi get-hostile-belief) 
  let msg create-msg-convoi-to-convoi-broadcast "inform" who (convois in-cone range 360 with [who > my-id]) l [] "statusLeader"
  report msg
end

to-report msg-status-leader-to-leader-convoi [leader]
  let my-id who
  let l (list ticks get-leader-id-drone get-hostile-belief) 
  let msg create-msg-convoi-to-convoi "inform" who leader l [] "splitstatus"
  report msg
end


to-report msg-inform-is-new-leader 
  let my-id who
  let msg create-msg-convoi-to-convoi-broadcast "inform" who (convois in-cone range 360 with [who > my-id]) my-id [] "nLeader"
  report msg
end 


to-report msg-convoi-detect-hostile [zone]
 let content zone
 let msg create-msg-convoi-to-convoi "inform" who get-leader-id-convoi content [] "hostile"
 report msg
end

to-report msg-send-path 
  let msg create-msg-leader-to-leader-leader "inform" who get-leader-id-drone as-path "path"
  report msg
end



to receive-message-convoi
  if not empty? incoming-queue
  [
    let msg get-message
    printcom (word "(" breed " " who ") re√ßoi : " msg)
    let dest read-from-string get-to msg
    let bool (is-number? dest and dest = who) or (is-list? dest and member? who dest)
    ifelse bool
    [
      ;print msg
      let perf get-performative msg
      let sub get-sujet msg
      if perf = "request" and sub = "split" [receive-split-request msg stop]
      if perf = "inform" and sub = "statusLeader" [receive-status-leader msg stop]
      if perf = "inform" and sub = "status" [receive-status msg stop]
      if perf = "inform" and sub = "hostile" [receive-hostile-inform msg stop]
      if perf = "inform" and sub = "nLeader" [receive-is-new-leader msg stop]
      if perf = "inform" and sub = "splitstatus" [receive-status-old-leader msg stop]
    ]
    [
      add-to-forwarded-msg msg
    ]
  ]
end


to receive-status-old-leader [msg]
  
  print (word "(" breed " " who ") receive-status-old-leader " msg)
  
end

to receive-split-request [msg]
  let id who 
  let id2 read-from-string get-to msg
  ifelse member? id id2 
  [ make-leader]
  [ printcom (word "(" breed " " who ") ERREUR  receive-split-request " msg) ]
end

to receive-hostile-inform [msg]
  
  let id who
  let zone get-content msg
  ;print (word "(" breed " " who ")  receive-hostile-inform " zone)
  add-hostile-belief zone
end

to receive-status [msg]
  let id who
  let zones item 3 get-content msg
  foreach zones
  [
    
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
  
end

to receive-status-leader [msg]
  ;print (word "(" breed " " who ")  receive-status-leader " msg)
  let id who
  
  let zones item 3 get-content msg
  if empty? zones [stop]
  ;set zones item 1 zones
  ;print zones
  
  foreach zones
  [
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
  
end

to receive-is-new-leader [msg]
  let id who
  let id-l read-from-string get-from msg
  let from get-sender msg
  if to-protect? [
    print msg 
    print (word "(" breed " " who ") mon nouveau leader est  " id-l " sender : " from)]
  set-leader-id-convoi id-l
end