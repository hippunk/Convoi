
to-report msg-convoiL-request-split-convoi [nLeader_id]
  let l (list ticks get-leader-id-drone get-hostile-belief) 
  let msg convoi-create-message "request" nLeader_id l [] "split"
  report msg
end

to-report msg-convoi-inform-status-convoiL 
  let l (list ticks get-convoi-critic get-leader-id-drone get-hostile-belief) 
  let msg convoi-create-message "inform" get-leader-id-convoi l [] "status"
  report msg
end


to-report msg-convoiL-inform-status-convoi
  let my-id who
  let l (list ticks get-convoi-critic get-leader-id-convoi get-hostile-belief) 
  let msg leader-convoi-to-convoi-broadcast "inform"  l [] "statusLeader"
  report msg
end



to-report msg-convoiL-inform-is-new-leader-convoi 
  let msg leader-convoi-to-convoi-broadcast "inform" who [] "nLeader"
  report msg
end 

to-report msg-convoiL-inform-new-leader-droneL
  report convoi-create-message-to-drone "inform" who "nLeaderC"
end


to-report msg-convoi-inform-detect-hostile-convoiL [zone]
 let content zone
 let msg convoi-create-message "inform" get-leader-id-convoi content [] "hostile"
 report msg
end

to-report msg-convoiL-send-path-droneL
  let msg convoi-create-message-to-drone "inform" get-convoi-path-zone "path"
  report msg
end



to receive-message-convoi
  while [not empty? incoming-queue]
  [
    let msg get-message
    printcom (word "\t(" breed " " who ") re√ßoi : " msg)
    let dest read-from-string get-to msg
    let bool (is-number? dest and dest = who) or (is-list? dest and member? who dest)
    ifelse bool
    [
      ;print msg
      let perf get-performative msg
      let sub get-sujet msg
      
      ;; from convoi
      if perf = "request" and sub = "split" [convoi-receive-split-request msg]
      if perf = "inform" and sub = "statusLeader" [convoi-receive-status-leader msg]
      if perf = "inform" and sub = "status" [convoi-receive-status msg]
      if perf = "inform" and sub = "nLeader" [convoi-receive-is-new-leader msg]
      
      ;; from drone
      if perf = "inform" and sub = "nLeaderD" [convoi-receive-new-leader-droneL-to-convoiL msg]
      
      ;; from both
      if perf = "inform" and sub = "hostile" [convoi-receive-hostile-inform msg]
      
      
    ]
    [
      add-to-forwarded-msg msg
    ]
  ]
end

to convoi-receive-new-leader-droneL-to-convoiL [msg]

  let id who
  let id-l read-from-string get-from msg
  ;print (word "(" breed " " who ") receive-new-leader-drone-to-convoi " id-l) 
  set-leader-id-drone id-l
  send-message msg-convoiL-send-path-droneL
end


to convoi-receive-split-request [msg]
  let id who 
  let id2 read-from-string get-to msg
  ifelse member? id id2 [
    make-leader
    
  ]
  [ printcom (word "(" breed " " who ") ERREUR  receive-split-request " msg) ]
end

to convoi-receive-hostile-inform [msg]
  let id who
  let zone get-content msg
  add-hostile-belief zone
end

to convoi-receive-status [msg]
  let id who
  let zones item 3 get-content msg
  foreach zones
  [
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
  
end

to convoi-receive-status-leader [msg]
  let id who
  let content get-content msg
  let zones item 3 content
  set-convoi-critic item 1 content
  set-leader-id-drone item 2 content
  
  if empty? zones [stop]
  foreach zones
  [
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
  
end




to convoi-receive-is-new-leader [msg]
  let id who
  let id-l read-from-string get-from msg
  let content get-content msg
  ;set-leader-id-drone item 1 content
  
  let from get-sender msg
  if to-protect? [
    print (word "(" breed " " who ") mon nouveau leader est  " id-l " sender : " from)]
  set-leader-id-convoi id-l
end