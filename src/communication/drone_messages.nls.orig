;;;;;;;;;;;;;;;;
;;; TO LEADER
;;;;;;;;;;;;;;;;

to-report msg-drone-inform-status-droneL
  ;; envoi du status courant au drone leader
  let content (list ticks get-leader-id-drone get-drone-munition get-drone-essence get-hostile-belief)
  let msg drone-create-message "inform" get-leader-id-drone content [] "status"
  report msg
end

to-report msg-drone-inform-detect-hostile-droneL [zone]
 let content zone
 let msg drone-create-message "inform" get-leader-id-drone  content [] "hostile"
 report msg
end


;;;;;;;;;;;;;;;;
;;; TO DRONE
;;;;;;;;;;;;;;;;
to-report msg-droneL-inform-status-drones
  let my-id who
  let l (list ticks get-leader-id-convoi get-hostile-belief get-convoi-path-zone) 
  let msg leader-drone-to-drone-broadcast "inform"  l [] "statusLeader"
  report msg
end

to-report msg-droneL-inform-im-new-leader-drone ;; 1
 let msg leader-drone-to-drone-broadcast "inform" (drones in-cone range 360) [] "nLeader" ; 
 report msg
end

to-report msg-droneL-request-go-check-path [dest] ; order 1
  let msg drone-create-message "request" dest "" [] "check-path"
  report msg
end

to-report msg-droneL-request-go-check-position [zone dest] ; order 1
  let content (list ticks zone)
  let msg drone-create-message "request" dest content [] "check-pos"
  ;printcom (word "(" breed " " who ")  send : "  msg)
  report msg
end

to-report msg-droneL-request-NewLeader-drone [dest] ; order 1
  ; 1
  let msg drone-create-message "request" dest "" [] "nLeaderD"
  report msg
end

to-report msg-droneL-request-go-kill-position [zone dest] ; order 2
  let content (list ticks zone)
  let msg drone-create-message "request" dest content [] "kill-pos"
  report msg
end


;;;;;;;;;;;;;;;;
;;; TO CONVOI
;;;;;;;;;;;;;;;;
to-report msg-droneL-inform-status-convoiL
  let my-id who
  let l (list ticks get-leader-id-convoi get-hostile-belief get-drone-plan) 
  let msg drone-create-message-to-convoi "inform"  l "statusDrone"
  report msg
end


to-report msg-droneL-inform-im-new-leader-convoiL
  let msg drone-create-message-to-convoi "inform"  who "nLeaderD"
  report msg
end

to-report msg-droneL-request-regen-path-convoiL
  let msg drone-create-message-to-convoi "request"  who "regenPath"
  report msg
end


to receive-message-drone
  while [not empty? incoming-queue]
  [
    let msg get-message
    
    printcom (word "\t(" breed " " who ") reçoi : " msg)
    let dest read-from-string get-to msg
    let bool (is-number? dest and dest = who) or (is-list? dest and member? who dest)
    ifelse bool
    [
      let b true
      let perf get-performative msg
      let sub get-sujet msg
      
      
      ;; from leader OK
      if perf = "inform" and sub = "statusLeader" [drone-receive-status-leader msg set b false] ; OK
      if perf = "request" and sub = "check-pos" [drone-receive-check-pos-drone msg set b false] ; OK
      if perf = "inform" and sub = "nLeader" [drone-receive-im-new-leader-drone msg set b false] ; OK 1
      if perf = "request" and sub = "nLeaderD" [drone-receive-new-leader-drone msg set b false] ; OK 1 je deviens le nouveau leader
      if perf = "request" and sub = "kill-pos" [drone-receive-kill-pos-drone msg set b false] ; OK
      if perf = "request" and sub = "check-path" [drone-receive-check-path-drone msg set b false] ; NTEST
      
      
      ;; from convoi
      if perf = "inform" and sub = "nLeaderC" [drone-receive-is-new-leader-convoi msg set b false]
      if perf = "inform" and sub = "path" [drone-receive-path-convoi msg set b false]
      if perf = "inform" and sub = "pathregen" [drone-receive-path-regen msg set b false]     
   
      ;; from drone OK
      if perf = "inform" and sub = "status" [drone-receive-status-drone msg set b false]
      if perf = "inform" and sub = "hostile" [drone-receive-hostile-inform-drone msg set b false]


      if b [print (word "MESSAGE NON TRAITER : " msg)]

    ]
    [
      add-to-forwarded-msg msg
    ]
  ]
end


;;;;;;;;;;;;;;;;
;;; FROM LEADER
;;;;;;;;;;;;;;;;

to drone-receive-status-leader [msg]
  let id who
  let content get-content msg
  set-leader-id-convoi item 1 content
  set-convoi-path-zone item 3 content
  let zones item 2 content
  foreach zones [
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
end

to drone-receive-new-leader-drone [msg]
  set-leader-id-drone who
  set leader? true
  set color orange
  send-message msg-droneL-inform-im-new-leader-drone
  send-message msg-droneL-inform-im-new-leader-convoiL
  
end


to drone-receive-im-new-leader-drone [msg]
  let id who
  let id-l read-from-string get-from msg
  let from get-sender msg
  set-leader-id-drone id-l
  send-message msg-drone-inform-status-droneL
end

to drone-receive-check-pos-drone [msg]
  ;let id who
  ;let pos item 1 get-content msg
  ;drone-astar-to-zone pos true
  ;Ici juste besoin d'empiler l'intention
    print "ordre de check pos reçu"
end 

to drone-receive-kill-pos-drone [msg]
  ;let id who
  let pos item 1 get-content msg
  ;drone-astar-to-zone pos true
  ;Ici juste besoin d'empiler l'intention
<<<<<<< HEAD
    print "ordre de kill pos reçu"
=======
    print (word "ordre de kill pos reçu" pos self) 
    ;set intention-courante (word "check-pos " pos)
>>>>>>> 69afb58363ffb670ee4d7d60cccf252f966003d9
    add-intention (word "kill-pos-intention " pos) "kill-pos-done"
end 


to drone-receive-check-path-drone [msg]
  ;let id who
  ;let pos item 1 get-content msg
  ;drone-astar-to-zone pos true
  ;Ici juste besoin d'empiler l'intention
  print "ordre d'explo path reçu"
  add-intention "check-path-intention" "check-path-done"

  
end 

;;;;;;;;;;;;;;;;
;;; FROM DRONE
;;;;;;;;;;;;;;;;
to drone-receive-status-drone [msg]
  let id who
  let zones item 4 get-content msg
  foreach zones [
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
  let c get-content msg
  let l (list get-sender msg item 2 c item 3 c)
  add-drone-in-range l
end



to drone-receive-hostile-inform-drone [msg]
  print (word "(" breed " " who ") drone-receive-hostile-inform-drone : " msg) 
  let id who
  let zone get-content msg
  add-hostile-belief zone
end


to drone-receive-need-fuel-drone [msg]
  let id who
  let fuel item 1 get-content msg
  printcom (word "(" breed " " who ") ammo " get-from msg " last" fuel) 
  
end

;;;;;;;;;;;;;;;;
;;; FROM CONVOI
;;;;;;;;;;;;;;;;

to drone-receive-path-regen [msg]
  let content get-content msg
  print (word "(" breed " " who ")  TODO : drone-receive-path-regen : "  content)
end

to drone-receive-path-convoi [msg]
  set-convoi-path-zone get-content msg
  send-message msg-droneL-inform-status-drones
  
end

to drone-receive-is-new-leader-convoi [msg]
  let m get-content msg
  set-leader-id-convoi m
  send-message msg-droneL-inform-status-drones
end











;to drone-receive-need-ammo-drone [msg]
;  let id who
;  let ammo item 1 get-content msg
;  printcom (word "(" breed " " who ") ammo " get-from msg " last" ammo) 
;  
;end


