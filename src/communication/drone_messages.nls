;;;;;;;;;;;;;;
;;;; SEND ;;;;
;;;;;;;;;;;;;;

to-report send-status-drone
  ;; envoi du status courant au leader
  let content (list ticks get-leader-id-drone get-drone-munition get-drone-essence get-hostile-belief)
  let msg create-msg-drone-to-drone "inform" who known-leader-drone content [] "status"
  report msg
end

to-report need-ammo 
  let content (list ticks get-drone-munition )
  let msg create-msg-drone-to-drone "need" who known-leader-drone content [] "need-ammo"
  report msg
end

to-report need-fuel 
  let content (list ticks get-drone-essence)
  let msg create-msg-drone-to-drone "need" who known-leader-drone content [] "need-fuel"
  report msg
end

to-report msg-drone-detect-hostile [zone]
 let content zone
 let msg create-msg-drone-to-drone "inform" who known-leader-drone content [] "hostile"
 report msg
end


;;;;;;;;;;;;;;;
;;;; ORDER ;;;;
;;;;;;;;;;;;;;;


to-report go-check-position [zone dest] ; order 1
  let content (list ticks zone)
  let msg create-msg-drone-to-drone "request" who dest content [] "check-pos"
  ;printcom (word "(" breed " " who ")  send : "  msg)
  report msg
end

to-report go-kill-position [zone dest] ; order 2
  let content (list ticks zone)
  let msg create-msg-drone-to-drone "request" who dest content [] "kill-pos"
  report msg
end

to go-reload [dest]; order 3
  let content (list 3 ticks)
  let msg create-msg-drone-to-drone "request" who dest content [] "reload"
   ifelse not empty? (get-receivers msg)
   [
     send msg
     printcom (word "(" breed " " who ")  send : "  msg)
   ]
   [ 
     printcom (word "(" breed " " who ")  messages non envoyé " ticks)
   ]
end

to go-refuel [dest] ; order 4
  let content (list 4 ticks)
  let msg create-msg-drone-to-drone "request" who dest content [] "refuel"
   ifelse not empty? (get-receivers msg)
   [
     send msg
     printcom (word "(" breed " " who ")  send : "  msg)
   ]
   [ 
     printcom (word "(" breed " " who ")  messages non envoyé " ticks)
   ]
end 




;;;;;;;;;;;;;;;;;
;;;; RECEIVE ;;;;
;;;;;;;;;;;;;;;;;

to receive-message-drone
  
  
  if not empty? incoming-queue
  [
    let msg get-message
    printcom (word "\t(" breed " " who ") reçoi : " msg)
    let dest read-from-string get-to msg
    let bool (is-number? dest and dest = who) or (is-list? dest and member? who dest)
    ifelse bool
    [
      let perf get-performative msg
      let sub get-sujet msg
      ;if perf = "inform" and sub = "statusLeader" [receive-status-leader msg stop]
      if perf = "inform" and sub = "status" [receive-status-drone msg stop]
      if perf = "inform" and sub = "hostile" [receive-hostile-inform-drone msg stop]
      if perf = "need" and sub = "need-ammo" [receive-need-ammo-drone msg stop]
      if perf = "need" and sub = "need-fuel" [receive-need-fuel-drone msg stop]
      
      if perf = "request" and sub = "check-pos" [receive-check-pos-drone msg stop]
      if perf = "request" and sub = "kill-pos" [receive-check-pos-drone msg stop]
      if perf = "inform" and sub = "nLeaderC" [receive-is-new-leader-convoi msg stop]
      if perf = "inform" and sub = "path" [receive-path-convoi msg stop]
    ]
    [
      add-to-forwarded-msg msg
    ]
  ]
end

to receive-path-convoi [msg]
  set-convoi-path-zone get-content msg
  ;print (word "(" breed " " who ") receive-path-convoi " msg) 
  
end

to receive-is-new-leader-convoi [msg]
  printcom (word "(" breed " " who ") receive-is-new-leader-convoi " msg) 
  let m get-content msg
  set-leader-id-convoi m
end

to receive-check-pos-drone [msg]
  let id who
  let pos item 1 get-content msg
  ;strat-check-pos pos
  ;printcom (word "(" breed " " who ") receive-check-pos-drone " get-from msg " pos" pos) 
  drone-astar-to-zone pos true
  
end 
to receive-need-ammo-drone [msg]
  let id who
  let ammo item 1 get-content msg
  printcom (word "(" breed " " who ") ammo " get-from msg " last" ammo) 
  
end

to receive-need-fuel-drone [msg]
  let id who
  let fuel item 1 get-content msg
  printcom (word "(" breed " " who ") ammo " get-from msg " last" fuel) 
  
end

to receive-status-drone [msg]
  let id who
  let zones item 4 get-content msg
  foreach zones
  [
    
    if ? != "hostile"
    [add-hostile-belief ?]
  ]
  add-drone-in-range get-sender msg
end

to receive-hostile-inform-drone [msg]
  
  let id who
  let zone get-content msg
  add-hostile-belief zone
end