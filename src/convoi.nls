convois-own[
  incoming-queue
  finished? ; Is the goal reached ?
  leader?   ; car leading the convoi convoi
  to-protect? ; Should this car be protected at all cost ?
  genlongpath? ; Should the leader compute a new path (but not shortest) ?
  regenpath? ; doit - on regenerer le path (nouvelle info? ... )
  last-send-time ; communication historical time-stamp
  ;drone-leader-id
  goal-zone
  alone?
  resign-cpt
  fake-zones
  ]


to setup-convois
  if nb-cars <= 0 [stop]
  ; get the size of the base to deploy the car accordingly
  let base-min-pxcor min [pxcor] of (patches with [hangar? and pzcor = mapAlt])
  let base-max-pxcor max [pxcor] of (patches with [hangar? and pzcor = mapAlt])
  let base-min-pycor min [pycor] of (patches with [hangar? and pzcor = mapAlt])
  let base-max-pycor max [pycor] of (patches with [hangar? and pzcor = mapAlt])


  ; creation des voitures du convoi et cortege
  create-convois nb-cars
  
  ; get the id of the first one
  let first-car min [who] of convois
  let last-car max [who] of convois

  ask convois
  [
    ; Init apparence NetLogo
    set shape "car"
    set color magenta
    set label who ; display the car names
    
    ; Init des structures BDI
    set incoming-queue [] ; Do not change
    set beliefs []
    set intentions []
    
    ; Init vars convois
    set speed 0.05 * simu-speed
    set maxdir 10 * simu-speed
    
    set heading 0
    set roll 0
    set pitch 0
    
    set finished? false
    set leader? false
    set to-protect? false
    set genlongpath? false
    set dead? false
    set regenpath? false
    set hp convois-hp
    set goal-zone [z_zone] of one-of patches with [objectif? and pzcor = mapAlt]
    set newdetect? false
    set fake-zones []
    set resign-cpt 0

    set nb-tick-color 0
    set last-color color
    ; FOV
    set range-visu convoi-range
    set range convoi-range
    set alone? false
    
    ;messages
    set send-interval 30
    set last-send-time 0
    set message-to-forward []
  ]
  
  
  
  ; configure the leader
  ask convoi first-car [
    set leader? true
    set color orange
    set last-color color
    set-leader-id-convoi who
    move-to patch base-max-pxcor base-max-pycor 1
  ]
  
  ; configure the last car as the critical one
  ask convoi last-car [
    set to-protect? true
    set color yellow
    set last-color color
  ]
  
  
  ; deploying the other car
  if nb-cars > 1 [
    ; ask non leader cars
    ask turtle-set sort-on [who] convois with [who > first-car]
    [
      ;set-leader-id-convoi first-car
      ; we create a link between them
      create-convoi-link-to turtle (who - 1)
      ;if who >= 4 and who mod 2 = 0 [ create-convoi-link-with turtle (who - 3) ]
      ; deploying
        ifelse (who - 1) mod 2 = 0 [ set xcor base-min-pxcor ] [ set xcor base-max-pxcor ] ; a gauche ou adroite selon le nombre (pair ou impair respectivement)
        set ycor base-max-pycor - (floor (who / 2) / (nb-cars / 2) * (base-max-pycor - base-min-pycor)) ; d'unerangee de plus en plus basse toutes les deux voitures
      set zcor solAlt
    ]
  ]
end



; Procedure principale de gestion des convois
to convois-think
  if nb-cars <= 0 [stop]
  
  ask convois
  [
    update-convoi-from-ihm
    look-around
    receive-message-convoi  
    
    ifelse leader? 
    [
      if newdetect? [if recalcul-path [set as-path replace-item who as-path [] ]]
      if timeout_has_expired last-send-time send-interval
      [
        let msg msg-status-leader
        send-message msg
        set last-send-time ticks
      ]  
    ]
    [
      if timeout_has_expired last-send-time send-interval ;; on informe le leader de nos connaissance tout les send-interval ticks
      [
        let msg msg-status
        send-message msg
        set last-send-time ticks
      ]
    ]
    set newdetect? false
  ]
  calcul-path-convoi-evite-zone-hotile
  ask convois with [leader? and get-convoi-critic and resign-cpt = 1] [print "demande au drone de kill" set resign-cpt 0]
  deplacement-convoi
end



to check-convoi-finished
  ; Critere d'arret: on est a cote de l'objectif
  ; Note: on veut etre a cote de l'objectif et pas directement dessus car on est une voiture, donc il se peut qu'on tourne indefiniment autour sans arriver directement a arriver dessus a cause de la limite d'angle de rotation.
  if any? [neighbors6-nowrap with [objectif?]] of patch-here [ ; On ne bouge pas si on est arrive au but!
                                                               ; Fini pour le leader
    set finished? true
    ; Fini aussi pour toutes les voitures-cortege qui suivent ce leader
    let linked-cars (list in-convoi-link-neighbors)
    while [not empty? linked-cars] [ ; on fait une boucle pour recursivement mettre a finished? = true toutes les voitures liees entre elles dans ce cortege
      let next-linked-cars []
      foreach linked-cars [
        ask ? [
          set finished? true
          if any? in-convoi-link-neighbors [ ; on recupere les voitures-cortege liees a la voiture-cortege en cours
            set next-linked-cars lput in-convoi-link-neighbors next-linked-cars
          ]
        ]
      ]
      set linked-cars next-linked-cars
    ]
  ]
end


to remove-convoi-links-between [ a b ]
   ;; remove all links between the two turtles
   ;; convert turtles to their own who numbers
   if is-link? convoi-link a b [ ask convoi-link a b [ die ] ]
   if is-link? convoi-link b a [ ask convoi-link b a [ die ] ]
end


;; Ajoute un nouveau leader qui peut prendre un long chemin ou non
;; num-new-leader : Identifiant unique du nouveau leader
;; takelongpath? : Boolean prendre le long chemin ou non
to make-leader
  set leader? true
  set color orange
  set last-color color
  set-leader-id-convoi who
  set genlongpath? false
  set regenpath? true
  send-message msg-inform-is-new-leader
  send-message msg-inform-drone-new-leader-convoi
  ;;INFORMER LE DRONE !!!!!!!!!!
  remove-convoi-links-between who who - 1
end


to update-convoi-from-ihm
  set range convoi-range
  set range-color convoi-range-color
end

to look-around
  let hostile-in-range hostiles in-cone-nowrap convoi-range 360
  ifelse count hostile-in-range  > 0
  [
    let cible one-of hostile-in-range
    let dest [z_zone] of ([patch-here] of cible)
    add-hostile-belief dest
    send-message msg-convoi-detect-hostile dest
    if leader? 
    [
      if alone? [stop]
      split (who + 1)
    ]
  ]
  [
    set newdetect? false
    let dest [z_zone] of patch-here
    remove-hostile-belief dest
  ]
end

to split [id]
  
  set-convoi-critic false
  set alone? true    
  
  let tmp msg-status-leader-to-leader-convoi (who + 1)
  send-message tmp 
     
  let msg-split msg-split-split (who + 1)
  send-message msg-split 
      
  ;set genlongpath? true
  set regenpath? true
end



;;;;;;;;;;;;;;;;;;;;;
;;;;    THINK    ;;;;
;;;;;;;;;;;;;;;;;;;;;


to-report recalcul-path 
  let first-car min [who] of convois
  let hos get-hostile-belief
  let my-as-path path-to-zone (item (who - first-car) as-path)
   if empty? my-as-path [report true]
  set my-as-path butfirst my-as-path
  if empty? my-as-path [report false]
  set my-as-path butlast my-as-path
  report not empty? filter [ member? ? my-as-path ] hos
end


;;;;;;;;;;;;;;;;;;;;;
;;;; DÉPLACEMENT ;;;;
;;;;;;;;;;;;;;;;;;;;;


to deplacement-convoi
  let first-car min [who] of convois

  ; Deplacement des leaders sur le chemin AStar
  ask convois with [leader? and not finished? and not dead?] 
  [ ; Tant qu'on n'a pas atteint le but
    ; Recupere le plan AStar
    let my-as-path item (who - first-car) as-path
    if not empty? my-as-path 
    [
      ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
      let next-patch first my-as-path
      let zz pzcor
      set next-patch [patch-at 0 0 (zz - pzcor)] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
      ; Deplacement vers le prochain waypoint
      if next-patch != patch-here [move-convoi next-patch false false]
      ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
      if patch-here = next-patch 
      [
        set my-as-path remove-item 0 my-as-path
        set as-path replace-item (who - first-car) as-path my-as-path
        if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
        
        
        let zzone path-to-zone my-as-path
        set-convoi-path-zone zzone
        
      ]
    ]
    ; Critere d'arret: on est a cote de l'objectif
    check-convoi-finished
  ]
  
  ; Deplacement des voitures-cortege: elles ne font que suivre la voiture devant eux (avec laquelle elles sont liées)
  ask convois with [not leader? and not finished? and not dead?] 
  [
    ifelse any? my-out-convoi-links 
    [
      move-convoi ([patch-here] of one-of out-convoi-link-neighbors) true true
    ]
    ; S'il n'y a pas de lien devant, c'est probablement que la voiture est morte, donc on devient leader
    [
      make-leader
      set leader? true
      set genlongpath? true
      if not to-protect? [ set color orange ]
    ]
  ]
end

; Avancer une voiture
; Permet de faire avancer les voitures d'un convoi (cortege et leader)
; Maintien egalement une petite distance afin de ne pas "rentrer" dans la voiture de devant
to move-convoi [goal slowdown? cortege?]
  ;show (word "ici:" patch-here " goal:" goal)

  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir [ ; limite a droite
    set dirCorrection maxdir
  ]
  [
    if dirCorrection < maxdir * -1 [ ; limite a gauche
      set dirCorrection maxdir * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed speed
  if slowdown? [
    if distance-nowrap goal < 1.1 [
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  fd tmp-speed ; Avance
end

to-report detect-obstacle [radius angle]
 if any? other patches in-cone radius angle with [obstacle?] [report true]
; if any? other patches in-cone 10 90 [report true]
; if any? other patches in-cone 3 270 [report true]
 report false
end

to turn-away
   ;let free-patches neighbors with [not any? patches ]
   ;if any? free-patches [face one-of free-patches]
   rt random 10 - 5
end


to init-beliefs-convoi [lC lD path]
  set-convoi-critic true
  set-leader-id-convoi lC
  set-leader-id-drone lD
  let zzone path-to-zone path
  set-convoi-path-zone zzone
end

