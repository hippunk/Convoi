drones-own[
  incoming-queue
  finished? ; Is the goal reached ?
  leader?   ; car leading the convoi convoi
  to-protect? ; Should this car be protected at all cost ?
  genlongpath? ; Should the leader compute a new path (but not shortest) ?
  regenpath? ; doit - on regenerer le path (nouvelle info? ... )
  last-send-time ; communication historical time-stamp
  
  eli-path
  angle-eli
  cooldown-status
  armed?
  known-leader-drone
  debug-x
  debug-y
  objectif
  intention-courante
  vital-critic
  fire?
  ]



to setup-drones
  if total-nb-drones > 0 [
    ; get the size of the base to deploy the car accordingly
    let base-min-pxcor min [pxcor] of (patches with [base? and pzcor = mapAlt])
    let base-max-pxcor max [pxcor] of (patches with [base? and pzcor = mapAlt])
    let base-min-pycor min [pycor] of (patches with [base? and pzcor = mapAlt])
    let base-max-pycor max [pycor] of (patches with [base? and pzcor = mapAlt])

    ; creation des voitures du convoi et cortege
    create-drones total-nb-drones
    ask drones
    [
      ; Init apparence NetLogo
      ; Visu
      set label (word who " : " hp) ; display the car names
      set size 2
      set shape "airplane 2"
      set color grey

      ; Init des structures BDI
      set incoming-queue [] ; Do not change

      ; Init vars convois
      set speed 0.1 * simu-speed
      set maxdir 10 * simu-speed
      set heading 0
      set roll 0
      set pitch 0
      
      set finished? false
      set leader? false
      set to-protect? false
      set genlongpath? false
      
      set dead? false
      set regenpath? false
      
      set fire? false
      
      
      
      ; Init des structures BDI
      set incoming-queue [] ; Do not change
      set beliefs []
      set intentions []
      
      
      set angle-eli random 360
      set eli-path  []
      
      set range-visu drone-range
      set range drone-range
      set range-color drone-range-color
      
      set cooldown-status 0 ;; Rechargement de l'arme
      
      ;set rand-path []
      set message-to-forward []
     
      set nb-tick-color 0
      set last-color color
      set armed? true
      set hp drones-hp
      set-drone-munition drones-max-ammo
      set-drone-essence drones-max-carburant - random (50)
      
      
      
      ;messages
      set send-interval 15
      set last-send-time 0
      set message-to-forward []
    ]
    let first-drone min [who] of drones
    ask drone first-drone [
      set color orange
      set last-color color
      set leader? true
      set-leader-id-drone who
      set known-leader-drone first-drone
      move-to patch base-min-pxcor base-max-pycor 1
    ]
    
    ; deploying the other car
    if total-nb-drones > 1 [
      ; ask non leader cars
      ask turtle-set sort-on [who] drones with [who > first-drone]
      [
        set-leader-id-drone first-drone
        set known-leader-drone first-drone
        let wwho  who - first-drone
        ifelse (who - 1) mod 2 = 0 [ set xcor base-min-pxcor ] [ set xcor base-min-pxcor + 1 ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
        set ycor base-max-pycor - (floor (wwho / 2) / (total-nb-drones / 2) * (base-max-pycor - base-min-pycor)) ; d'une rangee de plus en plus basse toutes les deux voitures
        set zcor solAlt
      ]

    ]

  ]
end

to test [str]
  show str
  show "ca a marche"
end

to  random-basic-strategy
  ask drones [
    ;get percept ces deux là sont liés aux messages
    ;update beliefs
    
    let p min-one-of patches with [base? =  true] [distance-nowrap myself]
    if distance-nowrap p < 2 [set-drone-essence drones-max-carburant]   
    if leader? 
    [
      if ticks = 10
      [
        let msg go-check-position [3 3 1] 3
        send-message msg
        set last-send-time ticks
      ]  
    ]
    update-drone-from-ihm
    check-vital
    
    
    ;look-around-drone
    ;forward-messages pb string instead of turtle number during run
    if timeout_has_expired last-send-time send-interval ;; on informe le leader de nos connaissance tout les send-interval ticks
    [
      drop-in-range 
      let msg send-status-drone
      send-message msg
      set last-send-time ticks
    ]
    
    receive-message-drone
    ;update-drone-tick
    check-dead
    
    
    ;Generate options ;pour ces trois là il faut regarder dans les croyances les plans des autres drones et avoir un process de consensus pour répartir les taches 
    ;determinate intentions, c'est grace à ce consensus qu'on détermine les intentions possibles (le leader escore, les autres explorent, escortent ou autre)
    ;select intentions, ici on choisi le plus urgent en fonction des priorités des différentes taches
    
    
    ;execute, Pour nous execute se résume à se déplacer vers as-path ou à escorter (changer escorter pour suivre le mécanisme de as-path afin de factorier le tout ?)
    
    
    ;drone-astar-to-zone [] false
    execute-intentions
      if fire?[
        drones-fire
    ]
    
  ]
  move-to-path-drones
  ;random-move-path-drones

  ;drone-eliptic-move

  drone-eliptic-move

  ;drones-fire

end

to drones-think 
  
  random-basic-strategy
end


to reload
  set-drone-munition drones-max-ammo
end

to drones-fire
 ;ask drones [
   set cooldown-status max list (cooldown-status  - 1) 0 ;; On diminue le cooldown pour pouvoir tirer 
   let hostiles-in-range hostiles in-cone-nowrap drone-range 360
   if count hostiles-in-range  > 0 [
     let cible one-of hostiles-in-range  
     if cooldown-status = 0 and get-drone-munition > 0[  ;; S'il y a un convoi dans le champ de vision ET qu'on peut tirer
       set cooldown-status cooldown ;; On met le cooldown au max
       face-nowrap cible
       tire cible proba-touche-drone
       ;;shoot ;; On tire :-)
       set-drone-munition (get-drone-munition - 1)
     ]
   ]
 ;]
end

to drone-eliptic-move
  
  ask drones[
    let id get-leader-id-convoi
    let u ([xcor] of convoi id)
    let v ([ycor] of convoi id)
    ;set debug-x ([xcor] of convoi 0) ; Pas de poroblèmes avec la récupération des coordonnées.
    ;set debug-y ([ycor] of convoi 0)
    
    let xp cos(angle-eli) * elipseA * patch-size + u
    let yp sin(angle-eli) * elipseB * patch-size + v
    let pas sqrt ( (xp - xcor) ^ 2 + (yp - ycor) ^ 2 )
    set xp cos(angle-eli) * elipseA + u
    set yp sin(angle-eli) * elipseB + v
    ;set debug-x xp
    ;set debug-y yp
    ;if xp < 0
    ; [set xp 0]
    ;if xp > max-pxcor
    ; [set xp max-pxcor]
    ; if yp < 0
    ; [set yp 0]
    ; if yp > max-pxcor
    ; [set yp max-pxcor]
    facexy xp yp

    ;show pas
    fd speed
    set-drone-essence precision (get-drone-essence - speed) 3 ;; update du carburant
    set angle-eli angle-eli + 360 / pas
    set angle-eli angle-eli mod 360
  ]
end


to check-dead
  if hp < 0 or get-drone-essence < 0[
    set dead? true
    print word (word breed " ") (word (word who) " : Je suis Mort " )
    die
  ]

end


to move-drone [goal]
  face goal
  fd speed ; Avance
  set-drone-essence precision (get-drone-essence - speed) 3 ;; update du carburant
end

to update-drone-from-ihm
  set range drone-range
  set range-color drone-range-color
  set label (word who " : " hp " : " get-drone-essence ) ; display the car names
end


;; Maj de l'etat d'une voiture du convoi quand ellle est touchée
;to toucher-drone
;  set hp hp - 1
;  if hp = 5 [set color color - 2]
;  if hp = 0 [ 
;    set dead? true
;    print word (word breed " ") (word (word who) " : Je suis Mort " )
;    set nb-cars nb-cars - 1
;    die
;  ]
;  
;end








to look-around-drone
  let hostile-in-range hostiles in-cone-nowrap drone-range 360
  ifelse count hostile-in-range  > 0
  [
    let cible one-of hostile-in-range
    let dest [z_zone] of ([patch-here] of cible)
    add-hostile-belief dest
    send-message msg-drone-detect-hostile dest
  ]
  [
    set newdetect? false
    let dest [z_zone] of patch-here
    remove-hostile-belief dest
  ]
end

to check-vital
  let p min-one-of patches with [base?] [(distance-nowrap myself)]
  ;ifelse get-drone-essence < drones-max-carburant * vital-critic [let msg need-fuel send-message msg set label-color red go-refuel-path][set label-color white ]
  if get-drone-essence - 40 > distance-nowrap p [set label-color white stop]
  
  ifelse get-drone-essence - 20 < distance-nowrap p [
    if leader? 
    [
      print "CHOIX STRAT pplus de fuel et pas de leader possible " 
      let d get-drone-in-range
      print d
    ]
    let msg need-fuel 
    send-message msg 
    set label-color red 
    go-refuel-path
  ]
  [
    if leader? 
    [
      print "choix nouveau leader"
      let d get-drone-in-range
      print d
    ]
  ]
end


to-report choix-drones []


end


to drone-astar-to-zone [zone regen?]
  if not regen? and not finished? [stop]
  ;printcom (word "(" breed " " who ") regen" regen? " " zone)
  if empty? zone [set zone [z_zone] of (one-of patches with [not obstacle?])]
  ;printcom (word "(" breed " " who ") je vais " zone) 
  let tmp-patch patch pxcor pycor pzcor
  
  let goal (one-of patches with [not obstacle? and compare-list z_zone zone])
  
  ;let p patches with [distance myself < 30 and pzcor < 10 and pzcor > 2]
  ;let goal (one-of p with [(not obstacle? and compare-list z_zone zone)])
  ;if goal = nobody [print "nobody" set goal (one-of patches with [(not obstacle? and compare-list z_zone zone) and pzcor < 10 and pzcor > 2])]
  
  let tmpplan plan-astar3D ( tmp-patch ) goal (false)
  set as-path replace-item who as-path tmpplan
    if not empty? (item who as-path) [
      set finished? false
    ]
end



to move-to-path-drones ;Ici, l'idée c'est de générer un chemin vers un patch aléatoire et de s'y rendre
  ;let tmp-plan plan-astar patch-here one-of patches with [pzcor = 0 and not obstacle?] false
  ask drones with [not finished? and not dead?] 
  [ ; Tant qu'on n'a pas atteint le but
    ; Recupere le plan AStar
    if not empty? (item who as-path) [
      let my-as-path item who  as-path
      ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
      let next-patch first (item who as-path)
      let zz pzcor
      ;set next-patch [patch-at 0 0 0] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
      ; Deplacement vers le prochain waypoint
      if next-patch != patch-here [move-drone next-patch]
      ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
      if patch-here = next-patch [
        set my-as-path remove-item 0 my-as-path
        set as-path replace-item who as-path my-as-path      
      ]
    ]

    ; Critere d'arret: on est a cote de l'objectif
    if  empty? (item who as-path) [
      ;printcom (word "(" breed " " who ") ARRIVÉ " [z_zone] of patch-here) 
      set finished? true
      ;ask patch-here [set pcolor red]
    ]
  ]
end



to go-refuel-path
  ;if not regen? and not finished? [stop]
  let path (item who as-path)
  if not empty? path
  [ 
    let p last path 
    set p patch [pxcor] of p [pycor] of p 0
    
    if [base? = true] of p [stop]
  ]
  let tmp-patch patch pxcor pycor pzcor
  let goal (one-of patches with [base? = true])
  let goal1 min-one-of patches with [obstacle? = false and pzcor = 1] [distance-nowrap goal]
  let tmpplan plan-astar3D ( tmp-patch ) goal1 (false)
  set as-path replace-item who as-path tmpplan
  print word (word breed " ") (word (word who) " : Je vais me recharger " tmpplan)
  if not empty? (item who as-path) [
    set finished? false
  ]
  
  
end


to init-beliefs-drone [lC lD path]
  set-leader-id-convoi lC
  set-leader-id-drone lD
  let zzone path-to-zone path
  set-convoi-path-zone zzone
end


