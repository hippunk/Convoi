to printbdi [bdi]
  if debug-bdi 
  [print bdi]
end

to set-convoi-path-zone [zones]
  let bel create-belief "path-Zone" zones
  ifelse exist-beliefs-of-type "path-Zone"
  [update-belief bel]
  [add-belief bel]
end

to-report get-convoi-path-zone
  let bel read-first-belief-of-type "path-Zone"
  report item 1 bel
end

to set-drone-plan [plan]
  let bel create-belief "plan" plan
  ifelse exist-beliefs-of-type "plan"
  [update-belief bel]
  [add-belief bel]
end

to-report get-drone-plan
  let bel read-first-belief-of-type "plan"
  report item 1 bel
end

to add-drone-in-range [num]
  let bel create-belief "in-range" num
  add-belief bel
end

to-report get-drone-in-range
  let bel beliefs-of-type "in-range"
  report bel
end

to drop-in-range
    let bels beliefs-of-type "in-range"
    foreach bels
    [
      remove-belief ?
    ]
end


to set-drone-munition [munition]
  let bel create-belief "munition" munition
  ifelse exist-beliefs-of-type "munition"
  [update-belief bel]
  [add-belief bel]
end

to-report get-drone-munition
  let bel read-first-belief-of-type "munition"
  report item 1 bel
end

to set-drone-essence [essence]
  let bel create-belief "essence" essence
  ifelse exist-beliefs-of-type "essence"
  [update-belief bel]
  [add-belief bel]
end

to-report get-drone-essence
  let bel read-first-belief-of-type "essence"
  report item 1 bel
end

to set-convoi-critic [critic?]
  let bel create-belief "critic" critic?
  ifelse exist-beliefs-of-type "critic"
  [update-belief bel]
  [add-belief bel]
end

to-report get-convoi-critic
  let bel read-first-belief-of-type "critic"
  ifelse empty? bel [report -1][report item 1 bel] 
end

to set-leader-id-convoi [id]
  let bel create-belief "leaderC" id
  ifelse exist-beliefs-of-type "leaderC"
  [update-belief bel]
  [add-belief bel]
end

to-report get-leader-id-convoi
  let bel read-first-belief-of-type "leaderC"
  ifelse empty? bel [report -1][report item 1 bel] 
end

to set-leader-id-drone [id]
  let bel create-belief "leaderD" id
  ifelse exist-beliefs-of-type "leaderD"
  [update-belief bel]
  [add-belief bel]
end

to-report get-leader-id-drone
  let bel read-first-belief-of-type "leaderD"
  ifelse empty? bel [report -1][report item 1 bel] 
  ;report item 1 bel
end

to add-hostile-belief [zone]
  let bel create-belief "hostile" zone
  ifelse exists-belief bel [set newdetect? false ] [add-belief bel set newdetect? true ask patches with [compare-list z_zone zone and pzcor = 0] [set pcolor 23]]
end 

to remove-hostile-belief [zone]
  let bel create-belief "hostile" zone
  if exists-belief bel 
  [remove-belief bel]
end 

to-report get-hostile-belief 
  ifelse exist-beliefs-of-type "hostile"
  [
    let l []
    let bels beliefs-of-type "hostile"
    foreach bels
    [
      set l lput item 1 ? l
    ]
    report l
  ]
  [report []]
end 